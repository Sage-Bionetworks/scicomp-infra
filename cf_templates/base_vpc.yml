AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a VPC with public subnet, an Internet gateway and a managed NAT gateway (to be shared with other possible subnets).
Parameters:
  VpcName:
    Description: The VPC name (i.e. Synapse-Prod)
    Type: String
  VpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 10.40)
    Type: String
  SubnetZone:
    Description: Availability zone for public subnet
    Type: String
    AllowedValues:
      - us-east-1a
      - us-east-1b
      - us-east-1c
      - us-east-1d
    Default: us-east-1a
  VpnCidr:
    Description: CIDR of the (sophos-utm) VPN
    Type: String
    Default: "10.1.0.0/16"
Mappings:
  SubnetConfig:
    VPC:
      CIDR: "0.0/16"
    Public:
      CIDR: "255.0/24"
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, VPC, CIDR]
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Ref VpcName
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      CidrBlock: !Join
        - '.'
        - - !Ref VpcSubnetPrefix
          - !FindInMap [SubnetConfig, Public, CIDR]
      AvailabilityZone: !Ref SubnetZone
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: !Join ["-", [!Ref VpcName, "public"]]
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  GatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayAttachment"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP"
          - "AllocationId"
      SubnetId:
         Ref: "PublicSubnet"
  ElasticIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  VpnSecurityGroup:
    DependsOn: "VPC"
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security Group for VPN
      VpcId:
        Ref: "VPC"
      SecurityGroupIngress:
        - CidrIp: !Ref VpnCidr
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
          Description: "Allow all VPN traffic"
      # CF does not support removing all rules, workaround is to add a pointless rule
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
Outputs:
  VPCId:
    Description: "VPCId of the newly created VPC"
    Value:
      Ref: "VPC"
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VPCId']]
  VpcCidr:
    Description: "VPC CIDR of the newly created VPC"
    Value: !GetAtt
      - VPC
      - CidrBlock
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcCidr']]
  VPCSubnetPrefix:
    Description: "VPC subnet prefix"
    Value: !Ref VpcSubnetPrefix
    Export:
      Name: !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcSubnetPrefix']]
  PublicSubnet:
    Description: "SubnetId of the public subnet"
    Value: !Ref PublicSubnet
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicSubnet']]
  PublicRouteTable:
    Description: "Route table Id for public subnets"
    Value: !Ref PublicRouteTable
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'PublicRouteTable']]
  VpcDefaultSecurityGroup:
    Description: "VPC DefaultSecurityGroup Id "
    Value: { "Fn::GetAtt" : ["VPC", "DefaultSecurityGroup"] }
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpcDefaultSecurityGroup']]
  VpnSecurityGroup:
    Description: "VPN Security Group Id "
    Value: !Ref VpnSecurityGroup
    Export:
      Name:
        !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'VpnSecurityGroup']]
  InternetGateway:
    Description: "Internet Gateway"
    Value: !Ref InternetGateway
    Export:
      Name: !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'InternetGateway']]
  NatGateway:
    Description: "NAT Gateway"
    Value: !Ref NatGateway
    Export:
      Name: !Join ['-', [!Ref 'AWS::Region', !Sub '${AWS::StackName}', 'NatGateway']]
