AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Creates a subnet of arbitrary size connected to a given base VPC
Parameters:
  VpcId:
    Description: The ID of the VPC this subnet belongs to
    Type: String
  VpcSubnetPrefix:
    Description: The prefix of the CIDR used by the VPC above (e.g. 10.5)
    Type: String
  SubnetSuffix:
    Description: The VPC subnet suffix (e.g. 0.2/8)
    Type: String
  SubnetZones:
    Description: Availability zones for subnets
    Type: List<AWS::EC2::AvailabilityZone::Name>
    ConstraintDescription: List of Availability Zones in a region, such as us-east-1a, us-east-1b, us-east-1c
    Default: "us-east-1a, us-east-1b, us-east-1c"
  SubnetType:
    Description: Type of the subnet (public or private)
    Type: String
    AllowedValues:
      - public
      - private
  Conditions:
    PublicSubnet: !Equals [public, !Ref SubnetType]
    PrivateSubnet: !Equals [private, !Ref SubnetType]
  
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Condition: PublicSubnet
    Properties:
      MapPublicIpOnLaunch: true
      # TODO: Import value from base_vpc
      VpcId: !ImportValue us-east-1-basevpc-VpcId
      CidrBlock: !Join
        - '.'
        # TODO: Import value from base_vpc
        - - !ImportValue us-east-1-basevpc-VpcSubnetPrefix
          - !Ref SubnetSuffix
      AvailabilityZone: !Select
        - 0
        - !Ref PublicSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Condition: PublicSubnet
    Properties:
      VpcId:
        Ref: !Ref VpcId
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  PublicRoute:
    Type: "AWS::EC2::Route"
    Condition: PublicSubnet
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: !ImportValue us-east-1-basevpc-InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: PublicSubnet
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      RouteTableId:
        Ref: "PublicRouteTable"
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Condition: PublicSubnet
    Properties:
      VpcId:
        Ref: !ImportValue us-east-1-basevpc-VPCId
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Public"
        -
          Key: "Name"
          Value: "Public"
  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: PublicSubnet
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: PublicSubnet
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  PublicSubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: PublicSubnet
    Properties:
      SubnetId:
        Ref: "PublicSubnet"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Condition: privateSubnet
    Properties:
      VpcId: !ImportValue us-east-1-basevpc-VpcId
      CidrBlock: !Join
        - '.'
        - - !ImportValue us-east-1-basevpc-VpcSubnetPrefix
          - !Ref SubnetSuffix
      AvailabilityZone: !Select
        - 0
        - !Ref PrivateSubnetZones
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: "Private"

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Condition: PrivateSubnet
    Properties:
      VpcId:
        Ref: !ImportValue us-east-1-basevpc-VpcId
      Tags:
        -
          Key: "Application"
          Value:
            Ref: "AWS::StackName"
        -
          Key: "Network"
          Value: "Private"
        -
          Key: "Name"
          Value: "Private"
  PrivateRouteToInternet:
    Type: "AWS::EC2::Route"
    Condition: PrivateSubnet
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: !ImportValue us-east-1-basevpc-NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: PrivateSubnet
    Properties:
      SubnetId:
        Ref: "PrivateSubnet"
      RouteTableId:
        Ref: "PrivateRouteTable"
